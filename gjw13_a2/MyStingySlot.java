// MyStingySlot.java
// Author: Greg Wills
// NetId: gjw13
// JUnit Testing - Assignment 2

package gjw13_a2;

import java.text.DecimalFormat;

public class MyStingySlot {
	
	protected int[] spin; // array of numbers that are the spin
	protected double cash; //  winnings for each spin
	protected int spinLength=5; // number of numbers that you get when you play
	
	public static void main(String[] args) {
		
		MyStingySlot s = new MyStingySlot();
		
		s.doSpin(); // method that gets random spin
		s.payoff(); // method computes payoff for spin generated by doSpin()
		s.report(); // method prints spin and the payoff for that spin
	}
	
	//default constructor
	public MyStingySlot()
	{
		spin = new int[5];
		cash = 0.0;
	}
	
	// method that returns last 5 numbers chosen/used
	int[] doSpin()
	{
		for (int i = 0; i < spin.length; i++)
		{
			spin[i] = (int) (Math.random()*60 +1); // assign random number to array
		}
		return spin;
	}
	
	// method to rig the spin --> used for testing
	int[] setSpin(int[] m)
	{
		for(int i=0; i < m.length; i++)
		{
			spin[i] = m[i]; // assign each number in m to spin
		}
		return spin;
	}
	
	// method that prints the given spin and payoff for that spin
	public void report()
	{
		System.out.print("Your spin: ");
		for (int i = 0; i < spin.length; i++){ // for loop prints each element in spin
			System.out.print(spin[i] + " ");
		}
		System.out.println();
		System.out.print("Pays: ");

		DecimalFormat df;
		df = new DecimalFormat("#.##"); // used for formatting answer to 2 dec places
		System.out.print("$" + df.format(cash));
		System.out.println();
	}
	
	// method that generates random 5 numbers and returns payoff
	double payoff()
	{
		cash = payoff(spin);
		return cash;
	}
	
	// method that computes payment in dollars to user
	double payoff(int[] m)
	{
		// **** method is functional but does not handle fullHousePayoff test
		// **** and twoPairPayoff test as it is not able to distinguish between 
		// **** two pairs or three of a kind and a pair
		cash = 0;
		// checking rule 1 --> big payoff
		if (rule1(m) == true){
			cash += 1000000;
		}
		else if (rule2(m) == true){ // checking rule 2 --> 4 of a kind
			cash += 10000;
			//System.out.println("4 of a kind!");
		}
		else if (rule3(m) == true){ // checking rule 3 --> full house
			cash += 500;
			//System.out.println("Full house!");
		}
		else if (rule4(m) == true){ // checking rule 4 --> 3 of a kind
			cash += 10;
			//System.out.println("3 of a kind!");
		}
		else if (rule5(m) == true){ // checking rule 5 --> pair
			cash += 2;
		}
		
		// *****checking rules 6-8 that are not mutually exclusive*****
		// RULE 6 --> add $0.10 for every perfect square
		int count = isPerfectSquare(m);
		cash = cash + (count * .1);
		
		// RULE 7 --> add $0.35 for every instance of 42
		int counter = is42(m);
		cash = cash + (counter * .35);
		
		// RULE 8 --> add $0.17 for every number divisible by 17
		int c = divisibleBy17(m);
		cash = cash + (c * .17);
		
		return cash;
	}
	
	// method to test if array follows rule 1
	boolean rule1(int[] m)
	{
		for (int i=1; i < m.length; i++)
		{
			if(m[0] != m[i]){
                return false;
			}
		}
		return true;
	}
	
	// method to test rule 2 --> 4 of a kind
	boolean rule2(int[] m)
	{
		int count = 0;
		//Loop through the values and compare each value to all values
	    //If 4 matches are made - return true
	    for(int x = 1; x < m.length; x++){
	        for(int y = 0; y < x; y++){
	            if(m[x] == m[y]) 
	            	count++;
	        }
	        if (count == 3)  
	        	return true;
	        count = 0;
	    }
	    return false;
	}
	
	//method to test rule 3 --> full house
	boolean rule3(int[] m)
	{
		int[] fh = new int[61]; // new array to count numbers in m
		boolean is3 = false;
		boolean is2 = false;
		for(int i=0; i<m.length;i++){ // for loop to put numbers in fh
			int num = m[i];
			fh[num] ++;
		}
		
		for(int j=0;j<fh.length;j++){ // traverse fh to check for 3 and 2
			if(fh[j] ==3)
				is3 = true;
			if(fh[j] ==2)
				is2 = true;
		}
		
		// if both 3 of a kind and 2 of a kind are true
		if(is3 == true && is2==true)
			return true;
		else // not a full house
			return false;
	}
	
	// method to test rule 4 --> 3 of a kind
	boolean rule4(int[] m)
	{
		if(isThreeOfAKind(m) == true)
			return true;
		else
			return false;
	}
	
	// method to test rule 5 --> pair
	boolean rule5(int[] m){
		int[] fh = new int[60]; // new array to count numbers in m
		boolean is2 = false;
		for(int i=0; i<m.length;i++) // for loop to put numbers in fh
		{
			int num = m[i];
			fh[num] ++; // similar process as hashing
		}
		int count = 0; // count if one or two pairs
		for(int j=0;j<fh.length;j++){ // traverse fh to check for 3 and 2
			if(fh[j] ==2)
				count++;
		}
		if(count == 1) // one pair
			is2 = true;
		else if (count == 2){ // two pair
			is2 = true;
			cash+=2;
		}
		else
			return false; // no pairs
		return is2;
			
	}
	
	// helper method for rule 3 and main method for rule 4
	boolean isThreeOfAKind(int[] m)
	{
		int count = 0;
		//Loop through the values and compare each value to all values
	    //If 3 matches are made - return true
	    for(int x = 1; x < m.length; x++){
	        for(int y = 0; y < x; y++){
	            if(m[x] == m[y]) {
	            	count++;
	            }
	        }
	        if (count == 2)  
	        	return true;
	        count = 0;
	    }
	    return false;
	}

	// helper method for rule 3 -->determines if two of a kind
	boolean isPair(int[] m)
	{
		int count = 0;
		// Loop through the values and compare each value to all values
	    // If 2 matches are made - return true
	    for(int x = 1; x < m.length; x++){
	        for(int y = 0; y < x; y++){
	            if(m[x] == m[y]) 
	            	count++;
	        }
	        if (count == 1)  
	        	return true;
	        count = 0;
	    }
	    return false;
	}
	
	// method to determine how many numbers are perfect squares
	int isPerfectSquare(int[] m)
	{
		// If number is equal to a perfect square, increase count
		int count = 0;
		for(int x = 0; x < m.length; x++){
			if (m[x] == 1)
				count++;
			if (m[x] == 4)
				count++;
			if (m[x] == 9)
				count++;
			if (m[x] == 16)
				count++;
			if (m[x] == 25)
				count++;
			if (m[x] == 36)
				count++;
			if (m[x] == 49)
				count++;
		}
		return count;
	}
	
	// method to count number of 42s in the array
	int is42(int[] m)
	{
		// If number is equal to 42, increase count
		int counter = 0;
		for(int x = 0; x < m.length; x++){
			if (m[x] == 42)
				counter ++;
		}
		return counter;
	}
	
	// method to count the numbers divisible by 17
	int divisibleBy17(int[] m)
	{
		// If number is divisible by 17, increase count
		int c = 0;
		for(int i=0; i < m.length; i++)
		{
			if (m[i] % 17 == 0)
				c++;
		}
		return c;
	}
}
